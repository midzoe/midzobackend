// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  firstName    String?  @map("first_name") @db.VarChar(50)
  lastName     String?  @map("last_name") @db.VarChar(50)
  phone        String?  @db.VarChar(20)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  bookings UserBooking[]

  @@map("users")
}

model Category {
  id          String    @id @db.VarChar(50)
  name        String    @db.VarChar(100)
  description String?   @db.Text
  icon        String?   @db.VarChar(10)
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  services Service[]

  @@map("categories")
}

model Service {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  description   String?  @db.Text
  image         String?  @db.VarChar(500)
  learnMoreLink String?  @map("learn_more_link") @db.VarChar(200)
  categoryId    String   @map("category_id") @db.VarChar(50)
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  category Category      @relation(fields: [categoryId], references: [id])
  bookings UserBooking[]

  @@map("services")
}

model Country {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(100)
  code          String?  @unique @db.VarChar(3)
  heroImage     String?  @map("hero_image") @db.VarChar(500)
  motto         String?  @db.Text
  history       String?  @db.Text
  culturalImage String?  @map("cultural_image") @db.VarChar(500)
  modernLife    String?  @map("modern_life") @db.Text
  modernImage   String?  @map("modern_image") @db.VarChar(500)
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  quickFacts CountryQuickFact[]
  traditions CountryTradition[]
  cuisine    CountryCuisine[]
  places     CountryPlace[]
  trends     CountryTrend[]

  @@map("countries")
}

model CountryQuickFact {
  id        Int    @id @default(autoincrement())
  countryId Int    @map("country_id")
  title     String @db.VarChar(100)
  value     String @db.VarChar(200)

  // Relations
  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@unique([countryId, title], map: "countryId_title")
  @@map("country_quick_facts")
}

model CountryTradition {
  id          Int     @id @default(autoincrement())
  countryId   Int     @map("country_id")
  name        String  @db.VarChar(100)
  description String? @db.Text
  image       String? @db.VarChar(500)

  // Relations
  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@unique([countryId, name], map: "countryId_name")
  @@map("country_traditions")
}

model CountryCuisine {
  id          Int     @id @default(autoincrement())
  countryId   Int     @map("country_id")
  name        String  @db.VarChar(100)
  description String? @db.Text
  image       String? @db.VarChar(500)

  // Relations
  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@unique([countryId, name], map: "countryId_name")
  @@map("country_cuisine")
}

model CountryPlace {
  id          Int     @id @default(autoincrement())
  countryId   Int     @map("country_id")
  name        String  @db.VarChar(100)
  description String? @db.Text
  image       String? @db.VarChar(500)

  // Relations
  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@unique([countryId, name], map: "countryId_name")
  @@map("country_places")
}

model CountryTrend {
  id        Int    @id @default(autoincrement())
  countryId Int    @map("country_id")
  trendText String @map("trend_text") @db.Text

  // Relations
  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@map("country_trends")
}

model News {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(200)
  content     String?  @db.Text
  image       String?  @db.VarChar(500)
  category    String?  @db.VarChar(50)
  author      String?  @db.VarChar(100)
  publishedAt DateTime @default(now()) @map("published_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("news")
}

enum BookingStatus {
  PENDING   @map("pending")
  CONFIRMED @map("confirmed")
  CANCELLED @map("cancelled")
  COMPLETED @map("completed")

  @@map("BookingStatus")
}

model UserBooking {
  id          Int           @id @default(autoincrement())
  userId      Int           @map("user_id")
  serviceId   Int           @map("service_id")
  status      BookingStatus @default(PENDING)
  bookingData Json?         @map("booking_data")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id])

  @@map("user_bookings")
}

model University {
  id              Int      @id @default(autoincrement())
  name            String   @unique @db.VarChar(200)
  city            String   @db.VarChar(100)
  website         String?  @db.VarChar(200)
  applicationUrl  String?  @map("application_url") @db.VarChar(500)
  specialty       String?  @db.Text
  country         String   @default("Germany") @db.VarChar(100)
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  programs UniversityProgram[]

  @@map("universities")
}

model UniversityProgram {
  id           Int      @id @default(autoincrement())
  universityId Int      @map("university_id")
  name         String   @db.VarChar(200)
  level        String   @db.VarChar(20) // "Bachelor" or "Master"
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)

  @@unique([universityId, name, level], map: "universityId_name_level")
  @@map("university_programs")
}